version: '3.8'

services:
  db:
    image: postgres:15
    container_name: postgres-db
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_DB=FootprintDB
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    ports:
      - "5432:5432"
    expose:
      - 5432

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: spring-backend
    env_file:
      - ./backend/.env  # ✅ Load environment variables correctly
    volumes:
      - ~/.m2:/root/.m2  # ✅ Cache Maven dependencies for faster builds
    ports:
      - "8080:8080"
    expose:
      - 8080
    depends_on:
      - db
    command: ["./mvnw", "spring-boot:run"]

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: react-frontend
    env_file:
      - ./frontend/.env  # ✅ Load environment variables correctly
    volumes:
      - ./frontend:/frontend  # ✅ Mount only frontend code for live updates
      - /frontend/node_modules # ✅ Prevent overwriting node_modules
    depends_on:
      - backend
    ports:
      - "3000:3000"
    expose:
      - 3000
    command: ["yarn", "start"]

  nginx:
    image: nginx:latest
    container_name: nginx-proxy
    volumes:
      - ./nginx/nginx.template.conf:/etc/nginx/nginx.template.conf
      - ./nginx/ssl:/etc/nginx/ssl  # ✅ Mount SSL certificates
      - ./nginx/entrypoint.sh:/entrypoint.sh
    environment:
      - BACKEND_URL=http://backend:8080
      - FRONTEND_URL=http://frontend:3000
    ports:
      - "80:80"
      - "443:443"  # ✅ Enable HTTPS
    depends_on:
      - backend
      - frontend
    entrypoint: [ "/bin/sh", "/entrypoint.sh" ]


volumes:
  postgres_data:
